name: Cross-compile Bitcoin Core for macOS

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master
jobs:
  
   build-mac-os:
    runs-on: ubuntu-20.04

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Cache apt dependencies
        uses: actions/cache@v2
        id: cache-apt
        with:
          path: ~/apt-cache
          key: apt-cache-${{ runner.os }}-${{ hashFiles('**/apt-deps-list.txt') }}

      - name: Install dependencies
        env:
          CACHE_HIT: ${{ steps.cache-apt.outputs.cache-hit }}
          DEPS: build-essential libtool autotools-dev automake pkg-config bsdmainutils python3 git cmake pkg-config curl python3-setuptools librsvg2-bin libtiff-tools imagemagick libcap-dev libz-dev libbz2-dev libtinfo5 genisoimage
        run: |
          if [[ "$CACHE_HIT" == 'true' ]]; then
            sudo cp --force --recursive ~/apt-cache/* /
          else
            echo $DEPS > apt-deps-list.txt
            sudo apt-get update && sudo apt-get install -yq $DEPS
            mkdir -p ~/apt-cache
            for dep in $DEPS; do
              dpkg -L $dep | while IFS= read -r f; do if test -f $f; then echo $f; fi; done | xargs cp --parents --target-directory ~/apt-cache/
            done
          fi

      - name: Download and set up custom macOS cross-compilation tools
        run: |
          mkdir -p SDKs
          cd SDKs 
          curl -L -o mac-os-cross.tar.gz https://github.com/bleach86/ghost-build-tools/releases/download/v0.1.0/mac-os-cross.tar.gz
          tar -xzf mac-os-cross.tar.gz
          cd ..

      - name: Cache macOS dependencies
        id: cache-dependencies
        uses: actions/cache@v2
        with:
          path: depends/x86_64-apple-darwin16
          key: macos-deps-${{ hashFiles('depends/packages/*.mk') }}

      - name: Build dependencies
        run: |
          cd depends
          make HOST=x86_64-apple-darwin16 SDK_PATH=/home/runner/work/ghost-core/SDKs/ -j$(nproc)

      - name: Configure Ghost Core
        run: |
          ./autogen.sh
          CONFIG_SITE=$PWD/depends/x86_64-apple-darwin16/share/config.site ./configure --prefix=/

      - name: Build Ghost Core
        run: make -j$(nproc) && make deploy
        
   build-windows:
    runs-on: ubuntu-20.04
  
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Cache apt dependencies
        uses: actions/cache@v2
        id: cache-apt
        with:
          path: ~/apt-cache
          key: apt-cache
  
      - name: Install dependencies
        env:
          CACHE_HIT: ${{ steps.cache-apt.outputs.cache-hit }}
          DEPS: build-essential libtool autotools-dev automake pkg-config bsdmainutils curl git nsis g++-mingw-w64-x86-64
        run: |
            if [[ "$CACHE_HIT" == 'true' ]]; then
              sudo cp --force --recursive ~/apt-cache/* /
            else
              sudo apt-get update && sudo apt-get install -yq $DEPS
              mkdir -p ~/apt-cache
              for dep in $DEPS; do
                dpkg -L $dep | while IFS= read -r f; do if test -f $f; then echo $f; fi; done | xargs cp --parents --target-directory ~/apt-cache/
              done
            fi
            sudo update-alternatives --install /usr/bin/x86_64-w64-mingw32-g++ x86_64-w64-mingw32-g++ /usr/bin/x86_64-w64-mingw32-g++-posix 10

      - name: Cache dependencies
        id: cache-dependencies
        uses: actions/cache@v2
        with:
          path: |
            depends/x86_64-w64-mingw32
          key: windows-deps-${{ hashFiles('depends/packages/*.mk') }}

      - name: Build dependencies
        run: |
          cd depends
          make HOST=x86_64-w64-mingw32 -j$(nproc)
  
      - name: Configure Ghost Core
        run: |
          ./autogen.sh
          CONFIG_SITE=$PWD/depends/x86_64-w64-mingw32/share/config.site ./configure --prefix=/
  
      - name: Build Ghost Core
        run: make -j$(nproc)



   build-ubuntu:
      runs-on: ubuntu-20.04
      strategy:
        matrix:
          os: [x86_64-linux-gnu]
      steps:
        - uses: actions/checkout@v2
  
        - name: Cache apt depencenies
          uses: actions/cache@v2
          id: cache-apt
          with:
            path: "~/apt-cache"
            key: apt-cache
  
        - name: Cache depends
          id: cache-dependencies
          uses: actions/cache@v2
          with:
            path: depends/${{ matrix.os }}
            key: ${{ matrix.os }}-${{ hashFiles('depends/packages/*.mk') }}
  
        - name: Install dependencies
          env:
            CACHE_HIT: ${{steps.cache-apt.outputs.cache-hit}}
            DEPS: build-essential libtool autotools-dev automake pkg-config bsdmainutils curl git ca-certificates ccache libqt5gui5 libqt5core5a libqt5dbus5 qttools5-dev qttools5-dev-tools
          run: |
            if [[ "$CACHE_HIT" == 'true' ]]; then
              sudo cp --force --recursive ~/apt-cache/* /
            else
              sudo apt-get update && sudo apt-get install -yq $DEPS
              mkdir -p ~/apt-cache
              for dep in $DEPS; do
                  dpkg -L $dep | while IFS= read -r f; do if test -f $f; then echo $f; fi; done | xargs cp --parents --target-directory ~/apt-cache/
              done
            fi
  
        - name: Build depends
          if: steps.cache-dependencies.outputs.cache-hit != 'true' && steps.cache-apt.outputs.cache-hit != 'true'
          run: cd depends/ && make -j4 HOST=${{matrix.os}} NO_USB=1
  
        - name: Refresh automake configs
          run: ./autogen.sh
  
        - name: Configure automake
          run: ./configure --prefix=`pwd`/depends/${{ matrix.os }} --with-gui=qt5
  
        - name: Build codebase
          run: make -j4
