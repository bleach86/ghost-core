name: Build and Test Ghost Core

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-20.04

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-20.04]
        target: [x86_64-linux-gnu, x86_64-apple-darwin16, x86_64-w64-mingw32]
        include:
          - os: ubuntu-20.04
            target: x86_64-linux-gnu
            cache-key: ubuntu-deps
            deps: build-essential libtool autotools-dev automake pkg-config bsdmainutils curl git ca-certificates ccache libqt5gui5 libqt5core5a libqt5dbus5 qttools5-dev qttools5-dev-tools
          - os: ubuntu-20.04
            target: x86_64-apple-darwin16
            cache-key: macos-deps
            deps: build-essential libtool autotools-dev automake pkg-config bsdmainutils python3 git cmake pkg-config curl python3-setuptools librsvg2-bin libtiff-tools imagemagick libcap-dev libz-dev libbz2-dev libtinfo5 genisoimage
          - os: ubuntu-20.04
            target: x86_64-w64-mingw32
            cache-key: windows-deps
            deps: build-essential libtool autotools-dev automake pkg-config bsdmainutils curl git nsis g++-mingw-w64-x86-64
          - os: ubuntu-20.04
            target: aarch64-linux-gnu
            cache-key: aarch64-deps
            deps: build-essential libtool autotools-dev automake pkg-config bsdmainutils curl git automake cmake curl libtool binutils-gold bsdmainutils pkg-config python3 patch g++-aarch64-linux-gnu binutils-aarch64-linux-gnu

          - os: ubuntu-20.04
            target: arm-linux-gnueabihf
            cache-key: armv7-deps
            deps: build-essential libtool autotools-dev automake pkg-config bsdmainutils curl git automake cmake curl libtool binutils-gold bsdmainutils pkg-config python3 patch g++-arm-linux-gnueabihf binutils-arm-linux-gnueabihf
            
        

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Cache apt dependencies
        uses: actions/cache@v4
        id: cache-apt
        with:
          path: ~/apt-cache
          key: apt-cache-${{ runner.os }}-${{ matrix.target }}

      - name: Install dependencies
        env:
          CACHE_HIT: ${{ steps.cache-apt.outputs.cache-hit }}
          DEPS: ${{ matrix.deps }}
        run: |
          # Always install ARM build tools if target is ARM architecture
          if [[ "${{ matrix.target }}" == 'arm-linux-gnueabihf' ]]; then
            sudo apt-get update && sudo apt-get install -yq g++-arm-linux-gnueabihf binutils-arm-linux-gnueabihf
          elif [[ "${{ matrix.target }}" == 'aarch64-linux-gnu' ]]; then
            sudo apt-get update && sudo apt-get install -yq g++-aarch64-linux-gnu binutils-aarch64-linux-gnu
          fi
      
          if [[ "$CACHE_HIT" == 'true' ]]; then
            find ~/apt-cache -type f | while read file; do
              dest="${file/\/home\/runner\/apt-cache/}"
              sudo mkdir -p "$(dirname "$dest")"
              sudo cp -f "$file" "$dest"
            done
          else
            sudo apt-get update && sudo apt-get install -yq $DEPS
            mkdir -p ~/apt-cache
            for dep in $DEPS; do
              dpkg -L $dep | while IFS= read -r f; do if test -f "$f"; then echo $f; fi; done | xargs cp --parents --target-directory ~/apt-cache/ || true
            done
          fi

      - name: Cache dependencies
        id: cache-dependencies
        uses: actions/cache@v4
        with:
          path: depends/${{ matrix.target }}
          key: ${{ matrix.cache-key }}-${{ hashFiles('depends/packages/*.mk') }}

      - name: Download and set up custom macOS cross-compilation tools
        if: matrix.target == 'x86_64-apple-darwin16'
        run: |
          mkdir -p ~/SDKs
          cd ~/SDKs 
          curl -L -o mac-os-cross.tar.gz https://github.com/bleach86/ghost-build-tools/releases/download/v0.1.0/mac-os-cross.tar.gz
          tar -xzf mac-os-cross.tar.gz

      - name: Configure Windows toolchain
        if: matrix.target == 'x86_64-w64-mingw32'
        run: |
          sudo apt install -y g++-mingw-w64-x86-64
          sudo update-alternatives --install /usr/bin/x86_64-w64-mingw32-g++ x86_64-w64-mingw32-g++ /usr/bin/x86_64-w64-mingw32-g++-posix 10

      - name: Build dependencies
        if: steps.cache-dependencies.outputs.cache-hit != 'true' && steps.cache-apt.outputs.cache-hit != 'true'
        run: |
          cd depends
          if [ "${{ matrix.target }}" == "arm-linux-gnueabihf" ]; then
            make HOST=${{ matrix.target }} NO_QT=1 -j$(nproc)
          else
            make HOST=${{ matrix.target }} SDK_PATH=~/SDKs/ -j$(nproc)
          fi

      - name: Refresh automake configs
        run: ./autogen.sh

      - name: Configure Ghost Core
        run: |
          CONFIG_SITE=$PWD/depends/${{ matrix.target }}/share/config.site ./configure --prefix=/

      - name: Build Ghost Core
        run: make -j$(nproc)

      - name: Package Ghost Core
        if: matrix.target == 'x86_64-apple-darwin16' || matrix.target == 'x86_64-w64-mingw32'
        run: make deploy

      - name: Move test artifacts
        if: matrix.target != 'x86_64-w64-mingw32'
        run: |
          mkdir -p artifacts
          cp -r src/test/test_ghost artifacts/
          if [[ "${{ matrix.target }}" != 'arm-linux-gnueabihf' ]]; then
            cp -r src/qt/test/test_ghost-qt artifacts/
          fi
          cp -r src/ghostd artifacts/
          cp -r src/ghost-wallet artifacts/
          cp -r src/ghost-cli artifacts/
          cp -r src/ghost-tx artifacts/
          cp -r test/config.ini artifacts/
      
      - name: Move test artifacts Windows
        if: matrix.target == 'x86_64-w64-mingw32'
        run: |
          mkdir -p artifacts
          cp -r src/test/test_ghost.exe artifacts/
          cp -r src/qt/test/test_ghost-qt.exe artifacts/
          cp -r src/ghostd.exe artifacts/
          cp -r src/ghost-wallet.exe artifacts/
          cp -r src/ghost-cli.exe artifacts/
          cp -r src/ghost-tx.exe artifacts/
          cp -r test/config.ini artifacts/
      
      - name: Upload test binary
        uses: actions/upload-artifact@v4
        with:
          name: test_ghost-${{ matrix.target }}
          path: artifacts/*

      

  test:
    needs: build
    runs-on: ${{ matrix.test_os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - target: x86_64-linux-gnu
            test_os: ubuntu-latest
          - target: x86_64-apple-darwin16
            test_os: macos-latest
          # - target: x86_64-w64-mingw32
          #   test_os: windows-latest
          - target: aarch64-linux-gnu
            test_os: ubuntu-latest
          - target: arm-linux-gnueabihf
            test_os: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download test binary
        uses: actions/download-artifact@v4
        with:
          name: test_ghost-${{ matrix.target }}
          path: ./artifacts/${{ matrix.target }}

      - name: Run tests on ARM architecture
        if: matrix.target == 'aarch64-linux-gnu' || matrix.target == 'arm-linux-gnueabihf'
        uses: uraimo/run-on-arch-action@v2
        with:
          arch: ${{ matrix.target == 'aarch64-linux-gnu' && 'aarch64' || 'armv7' }}
          distro: ubuntu22.04
          githubToken: ${{ github.token }}
          dockerRunArgs: |
            --volume "${PWD}/artifacts/${{ matrix.target }}/:/artifacts"
            --volume "${PWD}/:/ghost-core"
          install: |
                apt-get update -q -y
                apt-get install -q -y python3-zmq

          run: |
            # Make all files executable
            chmod +x /artifacts/*
        
            # Run test_ghost
            /artifacts/test_ghost -l test_suite -r detailed
        
            # Run test_ghost_qt if present
            if [ -f /artifacts/test_ghost_qt ]; then
              /artifacts/test_ghost-qt
            fi
        
            

            # Modify and copy the ini file
            sed -i 's|^SRCDIR=.*|SRCDIR=/ghost-core|' "/artifacts/config.ini"
            sed -i 's|^BUILDDIR=.*|BUILDDIR=/ghost-core|' "/artifacts/config.ini"
            sed -i 's|^RPCAUTH=.*|RPCAUTH=/ghost-core/share/rpcauth/rpcauth.py|' "/artifacts/config.ini"
            
            cp -r /artifacts/config.ini /ghost-core/test/

            # Move the rest of the executables to /ghost-core/src
            mv /artifacts/* /ghost-core/src/
            
            # Move to ghost-core and run further unit and functional tests
            cd /ghost-core/
            #test/util/bitcoin-util-test.py
            test/functional/test_runner.py --bitcoin --ghost

      - name: Run tests on Linux
        if: matrix.target == 'x86_64-linux-gnu'
        run: |
          # Make all files executable
          chmod +x ./artifacts/${{ matrix.target }}/*
      
          # Run test_ghost
          ./artifacts/${{ matrix.target }}/test_ghost -l test_suite -r detailed
      
          # Run test_ghost_qt
          ./artifacts/${{ matrix.target }}/test_ghost-qt
      
          # Move to ghost-core/test and run further unit and functional tests
          sudo apt install python3-zmq

          sed -i 's|^SRCDIR=.*|SRCDIR=$PWD|' "./artifacts/${{ matrix.target }}/config.ini"
          sed -i 's|^BUILDDIR=.*|BUILDDIR=$PWD|' "./artifacts/${{ matrix.target }}/config.ini"
          sed -i 's|^RPCAUTH=.*|RPCAUTH=$PWD/share/rpcauth/rpcauth.py|' "./artifacts/${{ matrix.target }}/config.ini"
          
          cp -r ./artifacts/${{ matrix.target }}/config.ini test/

          # Move the rest of the executables to src
          mv ./artifacts/${{ matrix.target }}/* ./src/
          
          #test/util/bitcoin-util-test.py
          test/functional/test_runner.py --bitcoin --ghost

      - name: Run tests on macOS
        if: matrix.test_os == 'macos-latest'
        run: |
          # Make all files executable
          chmod +x ./artifacts/${{ matrix.target }}/*
      
          # Run test_ghost
          ./artifacts/${{ matrix.target }}/test_ghost -l test_suite -r detailed
      
          # Run test_ghost_qt
          ./artifacts/${{ matrix.target }}/test_ghost-qt
      
          # Move to ghost-core/test and run further unit and functional tests
          sed -i 's|^SRCDIR=.*|SRCDIR=$PWD|' "./artifacts/${{ matrix.target }}/config.ini"
          sed -i 's|^BUILDDIR=.*|BUILDDIR=$PWD|' "./artifacts/${{ matrix.target }}/config.ini"
          sed -i 's|^RPCAUTH=.*|RPCAUTH=$PWD/share/rpcauth/rpcauth.py|' "./artifacts/${{ matrix.target }}/config.ini"
          
          cp -r ./artifacts/${{ matrix.target }}/config.ini test/

          # Move the rest of the executables to src
          mv ./artifacts/${{ matrix.target }}/* ./src/
          
          #test/util/bitcoin-util-test.py
          test/functional/test_runner.py --bitcoin --ghost

      - name: Run tests on Windows
        if: matrix.test_os == 'windows-latest'
        shell: cmd
        run: |
          # Run test_ghost
          .\artifacts\${{ matrix.target }}\test_ghost.exe -l test_suite -r detailed
      
          # Run test_ghost_qt if present
          .\artifacts\${{ matrix.target }}\test_ghost-qt.exe
          
      
          # Move to ghost-core and run further unit and functional tests

          # Update config.ini paths
          powershell -Command "(gc .\artifacts\${{ matrix.target }}\config.ini) -replace '^SRCDIR=.*', 'SRCDIR=%CD%' | Out-File -encoding ASCII .\artifacts\${{ matrix.target }}\config.ini"
          powershell -Command "(gc .\artifacts\${{ matrix.target }}\config.ini) -replace '^BUILDDIR=.*', 'BUILDDIR=%CD%' | Out-File -encoding ASCII .\artifacts\${{ matrix.target }}\config.ini"
          powershell -Command "(gc .\artifacts\${{ matrix.target }}\config.ini) -replace '^RPCAUTH=.*', 'RPCAUTH=%CD%\\share\\rpcauth\\rpcauth.py' | Out-File -encoding ASCII .\artifacts\${{ matrix.target }}\config.ini"
          
          # Copy config.ini to ghost-core/test
          xcopy .\artifacts\${{ matrix.target }}\config.ini test\ /Y

          # Move the rest of the executables to src
          move .\artifacts\${{ matrix.target }}\* .\src\
          
          #python test\util\bitcoin-util-test.py
          python test\functional\test_runner.py --bitcoin --ghost
